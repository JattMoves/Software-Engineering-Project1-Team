#!/usr/bin/env python3
import json, os, sys, time, subprocess
from typing import List
from acmecli.logging_setup import configure_logging
from acmecli.url_category import detect_category, model_id_from_hf_url
from acmecli.metrics.ramp_up import compute_ramp_up
TABLE1_ZEROES={'bus_factor':0.0,'bus_factor_latency':0,
'performance_claims':0.0,'performance_claims_latency':0,
'license':0.0,'license_latency':0,
'size_score':{'raspberry_pi':0.0,'jetson_nano':0.0,'desktop_pc':0.0,'aws_server':0.0},
'size_score_latency':0,'dataset_and_code_score':0.0,'dataset_and_code_score_latency':0,
'dataset_quality':0.0,'dataset_quality_latency':0,'code_quality':0.0,'code_quality_latency':0}
WEIGHTS={'ramp_up_time':1.0}
def cmd_install()->int:
    try:
        if not os.path.exists('requirements.txt'): return 0
        subprocess.check_call([sys.executable,'-m','pip','install','--user','-r','requirements.txt'],
                              stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
        return 0
    except Exception: return 0
def _abs(p:str)->str: return os.path.abspath(os.path.expanduser(p))
def cmd_urls(url_file:str)->int:
    configure_logging()
    with open(_abs(url_file),'r',encoding='utf-8-sig',errors='replace') as f:
        urls=[ln.strip() for ln in f if ln.strip() and not ln.strip().startswith('#')]
    for url in urls:
        if detect_category(url)!='MODEL': continue
        model_id=model_id_from_hf_url(url) or url
        r_score,r_ms=compute_ramp_up(model_id)
        t0=time.perf_counter_ns(); net=WEIGHTS['ramp_up_time']*r_score
        net_ms=int((time.perf_counter_ns()-t0)/1_000_000)
        def clamp01(x:float)->float:
            try:
                if x!=x or x is None: return 0.0
            except Exception: return 0.0
            return 0.0 if x<0 else 1.0 if x>1 else float(x)
        record={'name':model_id,'category':'MODEL',
                'net_score':clamp01(net),'net_score_latency':int(max(net_ms,0)),
                'ramp_up_time':clamp01(r_score),'ramp_up_time_latency':int(max(r_ms,0)),
                **TABLE1_ZEROES}
        sys.stdout.write(json.dumps(record, ensure_ascii=False)+"
")
    return 0
def cmd_test()->int:
    rc=subprocess.call([sys.executable,'-m','coverage','run','-m','pytest','-q'],
                       stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    passed=total=0
    try:
        out=subprocess.check_output([sys.executable,'-m','pytest','-q']).decode()
        lines=[l.strip() for l in out.splitlines() if l.strip()]; summary=lines[-1] if lines else ''
        if 'passed' in summary:
            parts=summary.replace(',','').split()
            nums=[int(tok) for tok in parts if tok.isdigit()]
            if nums: passed=nums[0]; total=sum(nums)
    except Exception: passed=total=0
    pct=0
    try:
        cov=subprocess.check_output([sys.executable,'-m','coverage','report']).decode()
        for ln in cov.splitlines():
            if ln.strip().startswith('TOTAL'):
                pct=int(ln.split()[-1].rstrip('%')); break
    except Exception: pct=0
    print(f"{passed}/{total} test cases passed. {pct}% line coverage achieved.")
    return 0 if rc==0 else 1
def main(argv: List[str])->int:
    if len(argv)<2:
        sys.stderr.write('Usage: ./run [install|test|URL_FILE]\n'); return 1
    if argv[1]=='install': return cmd_install()
    if argv[1]=='test': return cmd_test()
    return cmd_urls(argv[1])
if __name__=='__main__': sys.exit(main(sys.argv))
